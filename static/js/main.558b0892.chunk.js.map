{"version":3,"sources":["styles.module.css","constants.js","context.js","App.js","index.js"],"names":["module","exports","textures","presets","Context","createContext","Scene","textureCurrent","roughnessMap","texture","useLoader","TextureLoader","rugh","fbx","useFBX","model","useMemo","clone","BasicMaterial","MeshPhysicalMaterial","map","roughness","console","log","traverse","child","material","object","scale","View","useContext","setTexture","setPreset","className","styles","backgroundContainer","bodyContainer","heading","contolBlock","buttonBlockContainer","buttonBlock","onClick","downloadContainer","btn","class","modelContainer","canvasContainer","CanvasMain","color","preset","onCreated","camera","rotation","x","y","z","fallback","intensity","position","OrbitControls","Environment","background","App","useState","setColor","setRoughnessMap","Provider","value","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.558b0892.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasContainer\":\"styles_canvasContainer__1oELG\",\"buttonBlockContainer\":\"styles_buttonBlockContainer__I9xRl\",\"heading\":\"styles_heading__2--4h\",\"downloadContainer\":\"styles_downloadContainer__3Wgs1\",\"btn\":\"styles_btn__1S_Ok\",\"buttonBlock\":\"styles_buttonBlock__3mFk4\",\"contolBlock\":\"styles_contolBlock__2fHrS\",\"backgroundContainer\":\"styles_backgroundContainer__3_90d\",\"bodyContainer\":\"styles_bodyContainer__1lkPG\",\"modelContainer\":\"styles_modelContainer__1aMDz\"};","export const textures = {\n  default: \"cube_base_color.png\",\n  ocean: \"brm_blue_ocean.png\",\n  green: \"green_brm.png\",\n};\n\nexport const roughness = \"cube_roughness.png\";\n\nexport const presets = {\n  sunset: \"sunset\",\n  dawn: \"dawn\",\n  night: \"night\",\n  warehouse: \"warehouse\",\n  forest: \"forest\",\n  city: \"city\",\n};\n","import { createContext } from \"react\";\n\nexport const Context = createContext();\n","import { Canvas, useLoader } from \"@react-three/fiber\";\nimport { Environment, OrbitControls, useFBX } from \"@react-three/drei\";\nimport { Suspense, useContext, useMemo, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport \"./App.css\";\nimport { MeshPhysicalMaterial, TextureLoader } from \"three\";\nimport { presets, roughness, textures } from \"./constants\";\nimport { Context } from \"./context\";\n\nconst Scene = ({ textureCurrent, roughnessMap }) => {\n  const texture = useLoader(TextureLoader, textureCurrent);\n  const rugh = useLoader(TextureLoader, roughnessMap);\n\n  const fbx = useFBX(\"brdm_textured_hard.fbx\");\n\n  const model = useMemo(() => fbx.clone(true), [fbx]);\n\n  const BasicMaterial = new MeshPhysicalMaterial({\n    map: texture,\n    roughnessMap: rugh,\n    roughness: 1,\n  });\n  console.log(\"MAT\", BasicMaterial);\n\n  model.traverse(function (child) {\n    if (child) {\n      // apply texture\n      child.material = BasicMaterial;\n      child.material.roughnessMap = rugh;\n    }\n  });\n\n  return (\n    <>\n      <primitive object={model} scale={0.02}></primitive>\n    </>\n  );\n};\n\nexport const View = () => {\n  const { setTexture, setPreset } = useContext(Context);\n\n  return (\n    <div className={styles.backgroundContainer}>\n      <div className={styles.bodyContainer}>\n        <p className={styles.heading}>БРДМ-Д</p>\n        <div className={styles.contolBlock}>\n          <div className={styles.buttonBlockContainer}>\n            <p>Фон</p>\n            <div className={styles.buttonBlock}>\n              <button onClick={() => setPreset(presets.city)}>1</button>\n              <button onClick={() => setPreset(presets.warehouse)}>2</button>\n              <button onClick={() => setPreset(presets.forest)}>3</button>\n              <button onClick={() => setPreset(null)}>4</button>\n            </div>\n          </div>\n          <div className={styles.buttonBlockContainer}>\n            <p>Цвет</p>\n            <div className={styles.buttonBlock}>\n              <button onClick={() => setTexture(textures.default)}>1</button>\n              <button onClick={() => setTexture(textures.ocean)}>2</button>\n              <button onClick={() => setTexture(textures.green)}>3</button>\n            </div>\n          </div>\n          <div className={styles.downloadContainer}>\n            {/* download butotn */}\n\n            <button className={styles.btn}>\n              <i class=\"fa fa-download\"></i> Скачать смету\n            </button>\n            <button className={styles.btn}>\n              <i class=\"fa fa-download\"></i> Скачать модель\n            </button>\n          </div>\n        </div>\n        <div className={styles.modelContainer}>\n          <div className={styles.canvasContainer}>\n            <CanvasMain />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const CanvasMain = () => {\n  const { texture, color, preset, roughnessMap } = useContext(Context);\n\n  return (\n    <Canvas\n      onCreated={({ camera }) => {\n        camera.rotation.x = 25;\n        camera.rotation.y = 150;\n        camera.rotation.z = 2.33;\n      }}\n    >\n      <Suspense fallback={null}>\n        <ambientLight intensity={0.1} color=\"#f8ede0\" />\n        <pointLight position={[10, 100, 100]} />\n\n        <Scene\n          textureCurrent={texture}\n          color={color}\n          roughnessMap={roughnessMap}\n        />\n        <OrbitControls />\n\n        {preset && <Environment preset={preset} background />}\n      </Suspense>\n    </Canvas>\n  );\n};\n\nexport default function App() {\n  const [texture, setTexture] = useState(textures.default);\n  const [color, setColor] = useState(\"#FFFFFF\");\n  const [preset, setPreset] = useState(presets.city);\n  const [roughnessMap, setRoughnessMap] = useState(roughness);\n  return (\n    <Context.Provider\n      value={{\n        texture,\n        color,\n        setTexture,\n        preset,\n        setPreset,\n        setColor,\n        roughnessMap,\n        setRoughnessMap,\n      }}\n    >\n      <View />\n    </Context.Provider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}