{"version":3,"sources":["styles.module.css","constants.js","context.js","App.js","index.js"],"names":["module","exports","textures","presets","Context","createContext","Scene","textureCurrent","roughnessMap","texture","useLoader","TextureLoader","rugh","fbx","useFBX","model","useMemo","clone","BasicMaterial","MeshPhysicalMaterial","map","roughness","console","log","traverse","child","material","object","scale","View","useContext","setTexture","setPreset","className","styles","buttonBlockContainer","buttonBlock","onClick","buttonBlockContainerOne","canvasContainer","CanvasMain","color","preset","fallback","style","margin","strokeColor","strokeWidth","animationDuration","width","visible","onCreated","camera","rotation","x","y","z","intensity","position","Environment","background","OrbitControls","App","useState","setColor","setRoughnessMap","Provider","value","rootElement","document","getElementById","render"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,qBAAuB,qCAAqC,wBAA0B,wC,yJCD7IC,EACF,sBADEA,EAEJ,qBAFIA,EAGJ,gBAKIC,EAEL,OAFKA,EAIA,YAJAA,EAKH,SALGA,EAML,OCZKC,EAAUC,0B,gBCQjBC,EAAQ,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aACzBC,EAAUC,YAAUC,gBAAeJ,GACnCK,EAAOF,YAAUC,gBAAeH,GAEhCK,EAAMC,YAAO,0BAEbC,EAAQC,mBAAQ,kBAAMH,EAAII,OAAM,EAAhB,GAAuB,CAACJ,IAExCK,EAAgB,IAAIC,uBAAqB,CAC7CC,IAAKX,EACLD,aAAcI,EACdS,UAAW,KAYb,OAVAC,QAAQC,IAAI,MAAOL,GAEnBH,EAAMS,UAAS,SAAUC,GACnBA,IAEFA,EAAMC,SAAWR,EACjBO,EAAMC,SAASlB,aAAeI,EAEjC,IAEM,2BAAWe,OAAQZ,EAAOa,MAAO,KACzC,EAEYC,EAAO,WAClB,MAAkCC,qBAAW1B,GAArC2B,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,UAEpB,OACE,qCACE,sBAAKC,UAAWC,IAAOC,qBAAvB,UACE,mDACA,sBAAKF,UAAWC,IAAOE,YAAvB,UACE,wBAAQC,QAAS,kBAAML,EAAU7B,EAAhB,EAAjB,eACA,wBAAQkC,QAAS,kBAAML,EAAU7B,EAAhB,EAAjB,eACA,wBAAQkC,QAAS,kBAAML,EAAU7B,EAAhB,EAAjB,eACA,wBAAQkC,QAAS,kBAAML,EAAU7B,EAAhB,EAAjB,qBAGJ,sBAAK8B,UAAWC,IAAOI,wBAAvB,UACE,yDACA,sBAAKL,UAAWC,IAAOE,YAAvB,UACE,wBAAQC,QAAS,kBAAMN,EAAW7B,EAAjB,EAAjB,eACA,wBAAQmC,QAAS,kBAAMN,EAAW7B,EAAjB,EAAjB,eACA,wBAAQmC,QAAS,kBAAMN,EAAW7B,EAAjB,EAAjB,qBAGJ,qBAAK+B,UAAWC,IAAOK,gBAAvB,SACE,cAAC,EAAD,QAIP,EAEYC,EAAa,WACxB,MAAiDV,qBAAW1B,GAApDK,EAAR,EAAQA,QAASgC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,OAAQlC,EAAhC,EAAgCA,aAEhC,OACE,cAAC,WAAD,CACEmC,SACE,qBAAKC,MAAO,CAAEC,OAAQ,QAAtB,SACE,cAAC,IAAD,CACEC,YAAY,QACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,MARjB,SAaE,eAAC,IAAD,CACEC,UAAW,YAAiB,IAAdC,EAAa,EAAbA,OACZA,EAAOC,SAASC,EAAI,GACpBF,EAAOC,SAASE,EAAI,IACpBH,EAAOC,SAASG,EAAI,IACrB,EALH,UAOE,8BAAcC,UAAW,IAAMhB,MAAM,UACrC,4BAAYiB,SAAU,CAAC,IAAM,IAAK,OAClC,cAAC,EAAD,CACEnD,eAAgBE,EAChBgC,MAAOA,EACPjC,aAAcA,IAEfkC,GAAU,cAACiB,EAAA,EAAD,CAAajB,OAAQA,EAAQkB,YAAU,IAClD,cAACC,EAAA,EAAD,QAIP,EAEc,SAASC,IACtB,MAA8BC,mBAAS7D,GAAvC,mBAAOO,EAAP,KAAgBsB,EAAhB,KACA,EAA0BgC,mBAAS,WAAnC,mBAAOtB,EAAP,KAAcuB,EAAd,KACA,EAA4BD,mBAAS5D,GAArC,mBAAOuC,EAAP,KAAeV,EAAf,KACA,EAAwC+B,mBFrGjB,sBEqGvB,mBAAOvD,EAAP,KAAqByD,EAArB,KACA,OACE,cAAC7D,EAAQ8D,SAAT,CACEC,MAAO,CACL1D,UACAgC,QACAV,aACAW,SACAV,YACAgC,WACAxD,eACAyD,mBATJ,SAYE,cAAC,EAAD,KAGL,CCvHD,IAAMG,EAAcC,SAASC,eAAe,QAC5CC,iBACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFH,E","file":"static/js/main.0e226396.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasContainer\":\"styles_canvasContainer__1oELG\",\"buttonBlockContainer\":\"styles_buttonBlockContainer__I9xRl\",\"buttonBlockContainerOne\":\"styles_buttonBlockContainerOne__1K6sS\"};","export const textures = {\n  default: \"cube_base_color.png\",\n  ocean: \"brm_blue_ocean.png\",\n  green: \"green_brm.png\",\n};\n\nexport const roughness = \"cube_roughness.png\";\n\nexport const presets = {\n  sunset: \"sunset\",\n  dawn: \"dawn\",\n  night: \"night\",\n  warehouse: \"warehouse\",\n  forest: \"forest\",\n  city: \"city\",\n};\n","import { createContext } from \"react\";\n\nexport const Context = createContext();\n","import { Canvas, useLoader } from \"@react-three/fiber\";\nimport { Environment, OrbitControls, useFBX } from \"@react-three/drei\";\nimport { Suspense, useContext, useMemo, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport \"./App.css\";\nimport { MeshPhysicalMaterial, TextureLoader } from \"three\";\nimport { presets, roughness, textures } from \"./constants\";\nimport { Context } from \"./context\";\nimport { RotatingLines } from \"react-loader-spinner\";\n\nconst Scene = ({ textureCurrent, roughnessMap }) => {\n  const texture = useLoader(TextureLoader, textureCurrent);\n  const rugh = useLoader(TextureLoader, roughnessMap);\n\n  const fbx = useFBX(\"brdm_textured_hard.fbx\");\n\n  const model = useMemo(() => fbx.clone(true), [fbx]);\n\n  const BasicMaterial = new MeshPhysicalMaterial({\n    map: texture,\n    roughnessMap: rugh,\n    roughness: 0.4,\n  });\n  console.log(\"MAT\", BasicMaterial);\n\n  model.traverse(function (child) {\n    if (child) {\n      // apply texture\n      child.material = BasicMaterial;\n      child.material.roughnessMap = rugh;\n    }\n  });\n\n  return <primitive object={model} scale={0.02}></primitive>;\n};\n\nexport const View = () => {\n  const { setTexture, setPreset } = useContext(Context);\n\n  return (\n    <>\n      <div className={styles.buttonBlockContainer}>\n        <p>Фон</p>\n        <div className={styles.buttonBlock}>\n          <button onClick={() => setPreset(presets.city)}>1</button>\n          <button onClick={() => setPreset(presets.warehouse)}>2</button>\n          <button onClick={() => setPreset(presets.forest)}>3</button>\n          <button onClick={() => setPreset(presets.dawn)}>4</button>\n        </div>\n      </div>\n      <div className={styles.buttonBlockContainerOne}>\n        <p>Цвет</p>\n        <div className={styles.buttonBlock}>\n          <button onClick={() => setTexture(textures.default)}>1</button>\n          <button onClick={() => setTexture(textures.ocean)}>2</button>\n          <button onClick={() => setTexture(textures.green)}>3</button>\n        </div>\n      </div>\n      <div className={styles.canvasContainer}>\n        <CanvasMain />\n      </div>\n    </>\n  );\n};\n\nexport const CanvasMain = () => {\n  const { texture, color, preset, roughnessMap } = useContext(Context);\n\n  return (\n    <Suspense\n      fallback={\n        <div style={{ margin: \"auto\" }}>\n          <RotatingLines\n            strokeColor=\"green\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </div>\n      }\n    >\n      <Canvas\n        onCreated={({ camera }) => {\n          camera.rotation.x = 25;\n          camera.rotation.y = 150;\n          camera.rotation.z = 2.33;\n        }}\n      >\n        <ambientLight intensity={0.01} color=\"white\" />\n        <pointLight position={[1000, 100, 100]} />\n        <Scene\n          textureCurrent={texture}\n          color={color}\n          roughnessMap={roughnessMap}\n        />\n        {preset && <Environment preset={preset} background />}\n        <OrbitControls />\n      </Canvas>\n    </Suspense>\n  );\n};\n\nexport default function App() {\n  const [texture, setTexture] = useState(textures.default);\n  const [color, setColor] = useState(\"#FFFFFF\");\n  const [preset, setPreset] = useState(presets.city);\n  const [roughnessMap, setRoughnessMap] = useState(roughness);\n  return (\n    <Context.Provider\n      value={{\n        texture,\n        color,\n        setTexture,\n        preset,\n        setPreset,\n        setColor,\n        roughnessMap,\n        setRoughnessMap,\n      }}\n    >\n      <View />\n    </Context.Provider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}